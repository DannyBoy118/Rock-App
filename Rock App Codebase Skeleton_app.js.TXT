// App.js
import React, { useState } from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import { RNCamera } from 'react-native-camera';

export default function App() {
  const [analysis, setAnalysis] = useState(null);

  // Placeholder function to handle classification
  const takePicture = async (camera) => {
    try {
      const options = { quality: 0.8, base64: true };
      const data = await camera.takePictureAsync(options);
      // TODO: Send base64 image to ML model endpoint or on-device TFLite model
      console.log('Image captured:', data.uri);
      // TODO: setAnalysis("Rock: Granite\nProperties: Hardness 6-7, Igneous...");
    } catch (err) {
      console.error('Capture error:', err);
    }
  };

  return (
    <View style={styles.container}>
      <RNCamera
        style={styles.camera}
        type={RNCamera.Constants.Type.back}
        captureAudio={false}
      >
        {({ camera, status }) => {
          if (status !== 'READY') return <View><Text>Loading camera...</Text></View>;
          return (
            <View style={styles.captureContainer}>
              <TouchableOpacity
                onPress={() => takePicture(camera)}
                style={styles.button}
              >
                <Text style={styles.buttonText}>SNAP</Text>
              </TouchableOpacity>
            </View>
          );
        }}
      </RNCamera>
      {analysis && (
        <View style={styles.analysisContainer}>
          <Text style={styles.analysisTitle}>Identification Result</Text>
          <Text style={styles.analysisText}>{analysis}</Text>
        </View>
      )}

      {/* Future: Premium features subscription UI goes here */}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  camera: { flex: 3 },
  captureContainer: { flex: 1, justifyContent: 'flex-end', alignItems: 'center' },
  button: { padding: 20, backgroundColor: '#008080', borderRadius: 10, marginBottom: 20 },
  buttonText: { color: '#fff', fontSize: 18 },
  analysisContainer: { flex: 2, padding: 20, backgroundColor: '#fff' },
  analysisTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 8 },
  analysisText: { fontSize: 16 },
});

// Next steps:
// - Integrate TFLite model (on-device) or backend API for classification
// - Build subscription gate for premium features (advanced filtering, offline dataset)
// - Populate database and hook up data retrieval
// - Refine UI/UX and error handling
