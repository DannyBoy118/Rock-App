<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rock Identifier - AI-Powered Geological Analysis</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #FF6B35 0%, #F7931E 25%, #FFD23F 50%, #D4AF37 75%, #8B4513 100%),
                        url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 600"><defs><linearGradient id="sky" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stop-color="%23FF6B35"/><stop offset="100%" stop-color="%23F7931E"/></linearGradient><linearGradient id="canyon" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stop-color="%23D4AF37"/><stop offset="50%" stop-color="%23CD853F"/><stop offset="100%" stop-color="%238B4513"/></linearGradient></defs><rect width="1000" height="200" fill="url(%23sky)"/><polygon points="0,200 200,300 400,250 600,350 800,280 1000,320 1000,600 0,600" fill="url(%23canyon)"/><polygon points="100,300 300,400 500,350 700,450 900,380 1000,420 1000,600 0,600" fill="%23A0522D" opacity="0.8"/><polygon points="200,400 400,500 600,450 800,550 1000,480 1000,600 0,600" fill="%23654321" opacity="0.6"/></svg>') no-repeat center center;
            background-size: cover;
            background-attachment: fixed;
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }
        
        .header {
            background: linear-gradient(135deg, #FF6B35 0%, #D4AF37 50%, #8B4513 100%);
            color: white;
            text-align: center;
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 15px 35px rgba(255,107,53,0.4);
            border: 2px solid rgba(255,107,53,0.2);
        }
        
        .rock-logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            margin-bottom: 15px;
        }
        
        .rock-icon {
            font-size: 28px;
            filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));
            animation: float 3s ease-in-out infinite;
        }
        
        .rock-icon:nth-child(1) { animation-delay: 0s; color: #D3D3D3; }
        .rock-icon:nth-child(2) { animation-delay: 0.5s; color: #2F4F4F; }
        .rock-icon:nth-child(3) { animation-delay: 1s; color: #F5F5DC; }
        .rock-icon:nth-child(4) { animation-delay: 1.5s; color: #DEB887; }
        .rock-icon:nth-child(5) { animation-delay: 2s; color: #FFFAFA; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .header h1 {
            font-size: 36px;
            font-weight: 700;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 18px;
            opacity: 0.9;
            margin-top: 10px;
        }
        
        .card {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(139,69,19,0.3);
            border: 2px solid rgba(255,107,53,0.2);
            margin-bottom: 25px;
            overflow: hidden;
        }
        
        .upload-area {
            background: linear-gradient(145deg, #FFF8DC, #F5DEB3);
            border: 3px dashed #D4AF37;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: inset 5px 5px 10px #E6D7B8, inset -5px -5px 10px #FFFEFA;
        }
        
        .upload-area:hover {
            border-color: #FF6B35;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255,107,53,0.3);
        }
        
        .upload-icon {
            font-size: 64px;
            color: #008080;
            margin-bottom: 15px;
            display: block;
        }
        
        .upload-title {
            font-size: 24px;
            color: #008080;
            margin-bottom: 20px;
            font-weight: bold;
        }
        
        .button-group {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }
        
        .btn {
            padding: 15px 25px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            min-width: 150px;
            justify-content: center;
        }
        
        .btn-camera {
            background: linear-gradient(135deg, #FF6B35, #F7931E);
            color: white;
            box-shadow: 0 4px 15px rgba(255,107,53,0.3);
        }
        
        .btn-camera:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255,107,53,0.4);
        }
        
        .btn-upload {
            background: linear-gradient(135deg, #008080, #20B2AA);
            color: white;
            box-shadow: 0 4px 15px rgba(0,128,128,0.3);
        }
        
        .btn-upload:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,128,128,0.4);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }
        
        .upload-note {
            color: #666;
            font-size: 14px;
            font-style: italic;
            margin-top: 15px;
        }
        
        .camera-interface {
            background: rgba(0,0,0,0.9);
            padding: 25px;
            text-align: center;
            color: white;
        }
        
        .camera-title {
            font-size: 20px;
            margin-bottom: 20px;
        }
        
        #cameraVideo {
            width: 100%;
            max-width: 500px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        #captureCanvas {
            display: none;
        }
        
        .camera-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .btn-capture {
            background: linear-gradient(135deg, #FF6B35, #F7931E);
            color: white;
            border-radius: 50px;
            padding: 15px 30px;
        }
        
        .btn-cancel {
            background: #666;
            color: white;
            border-radius: 50px;
            padding: 15px 30px;
        }
        
        .captured-image {
            padding: 25px;
            text-align: center;
        }
        
        .captured-image h3 {
            color: #008080;
            margin-bottom: 20px;
            font-size: 20px;
        }
        
        .captured-image img {
            width: 100%;
            max-width: 400px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            background: linear-gradient(145deg, #f0f8ff, #e1f5fe);
        }
        
        .loading-icon {
            font-size: 64px;
            margin-bottom: 20px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .loading h3 {
            color: #008080;
            font-size: 24px;
            margin-bottom: 10px;
        }
        
        .loading p {
            color: #666;
            font-size: 16px;
            margin-bottom: 20px;
        }
        
        .progress-bar {
            width: 250px;
            height: 6px;
            background: #e0e0e0;
            border-radius: 3px;
            margin: 20px auto;
            overflow: hidden;
        }
        
        .progress-fill {
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, #008080, #20B2AA);
            animation: progress 2s infinite;
        }
        
        @keyframes progress {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .error {
            background: #ffebee;
            color: #c62828;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #c62828;
        }
        
        .results {
            padding: 30px;
            background: linear-gradient(145deg, #ffffff, #f8f9fa);
        }
        
        .result-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e0f7fa;
        }
        
        .result-icon {
            font-size: 64px;
        }
        
        .result-info h2 {
            color: #008080;
            font-size: 32px;
            margin: 0;
            font-weight: bold;
        }
        
        .confidence-badge {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 16px;
            box-shadow: 0 4px 15px rgba(76,175,80,0.3);
            margin-top: 10px;
            display: inline-block;
        }
        
        .result-section {
            margin-bottom: 25px;
        }
        
        .result-section h3 {
            color: #008080;
            font-size: 20px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .result-section p {
            font-size: 16px;
            line-height: 1.6;
            color: #333;
        }
        
        .properties-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        
        .property-tag {
            background: linear-gradient(135deg, #e0f7fa, #b2ebf2);
            color: #008080;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            border: 1px solid #008080;
        }
        
        .share-section {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
            flex-wrap: wrap;
        }
        
        .btn-share {
            background: linear-gradient(135deg, #2196F3, #1976D2);
            color: white;
        }
        
        .btn-save {
            background: linear-gradient(135deg, #4CAF50, #388E3C);
            color: white;
        }
        
        .hidden {
            display: none;
        }
        
        #fileInput {
            display: none;
        }
        
        .demo-note {
            background: rgba(255,255,255,0.9);
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
            border-left: 4px solid #FF6B35;
        }
        
        .demo-note h4 {
            color: #FF6B35;
            margin-bottom: 10px;
        }
        
        .demo-note p {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 28px;
            }
            
            .header p {
                font-size: 16px;
            }
            
            .upload-area {
                padding: 30px 20px;
            }
            
            .button-group {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 250px;
            }
            
            .result-header {
                flex-direction: column;
                text-align: center;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="rock-logo">
                <span class="rock-icon">🪨</span>
                <span class="rock-icon">🗿</span>
                <span class="rock-icon">⛰️</span>
                <span class="rock-icon">🏔️</span>
                <span class="rock-icon">💎</span>
            </div>
            <h1>Rock Identifier</h1>
            <p>AI-Powered Geological Analysis & Identification</p>
        </div>

        <div class="card">
            <div class="upload-area">
                <span class="upload-icon">📸</span>
                <h3 class="upload-title">Analyze Rock Sample</h3>
                
                <div class="button-group">
                    <button class="btn btn-camera" onclick="startCamera()">
                        📱 Take Photo
                    </button>
                    <button class="btn btn-upload" onclick="document.getElementById('fileInput').click()">
                        📁 Upload File
                    </button>
                </div>
                
                <input type="file" id="fileInput" accept="image/*" onchange="handleFileUpload(event)">
                
                <p class="upload-note">
                    Take a photo with your camera or upload from device • Supported: JPG, PNG, WEBP
                </p>
            </div>
        </div>

        <!-- Camera Interface -->
        <div id="cameraInterface" class="card hidden">
            <div class="camera-interface">
                <h3 class="camera-title">📸 Camera Ready</h3>
                <video id="cameraVideo" autoplay playsinline></video>
                <canvas id="captureCanvas"></canvas>
                <div class="camera-controls">
                    <button class="btn btn-capture" onclick="capturePhoto()">
                        📸 Capture
                    </button>
                    <button class="btn btn-cancel" onclick="stopCamera()">
                        ❌ Cancel
                    </button>
                </div>
            </div>
        </div>

        <!-- Captured Image Display -->
        <div id="capturedImageDisplay" class="card hidden">
            <div class="captured-image">
                <h3>📷 Captured Image</h3>
                <img id="capturedImage" alt="Captured rock sample">
            </div>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="card hidden">
            <div class="loading">
                <div class="loading-icon">🔬</div>
                <h3>Analyzing Rock Sample</h3>
                <p>AI is examining geological properties...</p>
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                </div>
            </div>
        </div>

        <!-- Error Display -->
        <div id="errorDisplay" class="error hidden"></div>

        <!-- Results Display -->
        <div id="resultsDisplay" class="card hidden">
            <div class="results">
                <div class="result-header">
                    <div class="result-icon">🪨</div>
                    <div class="result-info">
                        <h2 id="rockName"></h2>
                        <div class="confidence-badge" id="confidenceBadge"></div>
                    </div>
                </div>
                
                <div class="result-section">
                    <h3>🔬 Properties</h3>
                    <div class="properties-list" id="propertiesList"></div>
                </div>
                
                <div class="result-section">
                    <h3>🌍 Origin & Formation</h3>
                    <p id="originText"></p>
                </div>
                
                <div class="result-section">
                    <h3>💡 Interesting Facts</h3>
                    <p id="factsText"></p>
                </div>
                
                <div class="share-section">
                    <button class="btn btn-share" onclick="shareAnalysis()">
                        📤 Share Results
                    </button>
                    <button class="btn btn-save" onclick="saveAnalysis()">
                        💾 Save Analysis
                    </button>
                </div>
            </div>
        </div>

        <!-- Demo Note -->
        <div class="demo-note">
            <h4>🧪 Demo Mode</h4>
            <p>This is a demonstration version that uses simulated AI analysis. In production, this would connect to a real machine learning model for accurate rock identification. The interface shows how the actual app would work with camera capture, file upload, and detailed geological analysis.</p>
        </div>
    </div>

    <script>
        // Global variables
        let cameraStream = null;
        let currentAnalysis = null;

        // Mock rock database for demo
        const rockDatabase = [
            {
                name: "Granite",
                confidence: "87.3%",
                properties: ["Coarse-grained", "Contains quartz and feldspar", "Light colored", "High silica content"],
                origin: "Intrusive igneous rock formed from slowly cooled magma deep within Earth's crust over millions of years",
                facts: "One of the most common rocks in Earth's continental crust. Used extensively in construction and monuments due to its durability and attractive appearance."
            },
            {
                name: "Basalt",
                confidence: "92.1%",
                properties: ["Fine-grained", "Dark colored", "Dense", "Volcanic origin"],
                origin: "Extrusive igneous rock formed from rapidly cooled lava on Earth's surface",
                facts: "Most common volcanic rock on Earth. Forms much of the ocean floor and is found in many volcanic regions worldwide."
            },
            {
                name: "Limestone",
                confidence: "84.7%",
                properties: ["Contains calcium carbonate", "Often fossiliferous", "Light colored", "Sedimentary"],
                origin: "Sedimentary rock formed from compressed marine organisms and calcium carbonate deposits",
                facts: "Reacts with acid producing fizzing. Often contains fossils of ancient sea creatures. Used to make cement and as building stone."
            },
            {
                name: "Sandstone",
                confidence: "89.5%",
                properties: ["Made of sand grains", "Porous", "Varies in color", "Sedimentary"],
                origin: "Formed from compressed and cemented sand grains over millions of years",
                facts: "Common building material throughout history. The color depends on the minerals in the original sand and the cementing material."
            },
            {
                name: "Marble",
                confidence: "91.8%",
                properties: ["Metamorphic", "Crystalline", "Often white/colored", "Takes polish well"],
                origin: "Metamorphic rock formed from limestone or dolomite under heat and pressure",
                facts: "Prized for sculpture and architecture. Famous examples include the Taj Mahal and many Greek and Roman statues."
            }
        ];

        // Start camera function
        async function startCamera() {
            try {
                cameraStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'environment'
                    } 
                });
                
                const video = document.getElementById('cameraVideo');
                video.srcObject = cameraStream;
                
                document.getElementById('cameraInterface').classList.remove('hidden');
                hideOtherSections();
            } catch (err) {
                showError('Camera access denied or not available. Please use file upload instead.');
            }
        }

        // Stop camera function
        function stopCamera() {
            if (cameraStream) {
                cameraStream.getTracks().forEach(track => track.stop());
                cameraStream = null;
            }
            document.getElementById('cameraInterface').classList.add('hidden');
        }

        // Capture photo function
        function capturePhoto() {
            const video = document.getElementById('cameraVideo');
            const canvas = document.getElementById('captureCanvas');
            
            if (video && canvas) {
                const ctx = canvas.getContext('2d');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                ctx.drawImage(video, 0, 0);
                
                const imageDataUrl = canvas.toDataURL('image/jpeg', 0.8);
                showCapturedImage(imageDataUrl);
                stopCamera();
                analyzeImage();
            }
        }

        // Handle file upload
        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    showCapturedImage(e.target.result);
                    analyzeImage();
                };
                reader.readAsDataURL(file);
            }
        }

        // Show captured image
        function showCapturedImage(imageDataUrl) {
            const img = document.getElementById('capturedImage');
            img.src = imageDataUrl;
            document.getElementById('capturedImageDisplay').classList.remove('hidden');
            hideOtherSections(['capturedImageDisplay']);
        }

        // Simulate image analysis
        async function analyzeImage() {
            showLoading();
            
            // Simulate API call delay
            await new Promise(resolve => setTimeout(resolve, 2500));
            
            // Get random rock from database
            const randomRock = rockDatabase[Math.floor(Math.random() * rockDatabase.length)];
            currentAnalysis = randomRock;
            
            showResults(randomRock);
        }

        // Show loading state
        function showLoading() {
            document.getElementById('loadingState').classList.remove('hidden');
            hideOtherSections(['loadingState']);
        }

        // Show results
        function showResults(analysis) {
            document.getElementById('rockName').textContent = analysis.name;
            document.getElementById('confidenceBadge').textContent = `✨ Confidence: ${analysis.confidence}`;
            document.getElementById('originText').textContent = analysis.origin;
            document.getElementById('factsText').textContent = analysis.facts;
            
            // Populate properties
            const propertiesList = document.getElementById('propertiesList');
            propertiesList.innerHTML = '';
            analysis.properties.forEach(property => {
                const tag = document.createElement('div');
                tag.className = 'property-tag';
                tag.textContent = property;
                propertiesList.appendChild(tag);
            });
            
            document.getElementById('resultsDisplay').classList.remove('hidden');
            hideOtherSections(['resultsDisplay']);
        }

        // Show error
        function showError(message) {
            const errorDisplay = document.getElementById('errorDisplay');
            errorDisplay.textContent = message;
            errorDisplay.classList.remove('hidden');
            hideOtherSections(['errorDisplay']);
        }

        // Hide other sections
        function hideOtherSections(except = []) {
            const sections = ['cameraInterface', 'capturedImageDisplay', 'loadingState', 'errorDisplay', 'resultsDisplay'];
            sections.forEach(section => {
                if (!except.includes(section)) {
                    document.getElementById(section).classList.add('hidden');
                }
            });
        }

        // Share analysis
        async function shareAnalysis() {
            if (!currentAnalysis) return;
            
            const shareText = `🪨 Rock Identification Result\n\n` +
                `Name: ${currentAnalysis.name}\n` +
                `Confidence: ${currentAnalysis.confidence}\n\n` +
                `Properties: ${currentAnalysis.properties.join(', ')}\n\n` +
                `Origin: ${currentAnalysis.origin}\n\n` +
                `Facts: ${currentAnalysis.facts}\n\n` +
                `Identified with Rock Identifier App 📱`;
            
            if (navigator.share) {
                try {
                    await navigator.share({
                        title: 'Rock Identification Result',
                        text: shareText
                    });
                } catch (err) {
                    fallbackShare(shareText);
                }
            } else {
                fallbackShare(shareText);
            }
        }

        // Fallback share function
        function fallbackShare(text) {
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text).then(() => {
                    alert('Results copied to clipboard!');
                });
            } else {
                // Create temporary textarea for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = text;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                alert('Results copied to clipboard!');
            }
        }

        // Save analysis
        function saveAnalysis() {
            if (!currentAnalysis) return;
            
            const analysisData = {
                ...currentAnalysis,
                timestamp: new Date().toISOString(),
                id: Date.now()
            };
            
            // Save to localStorage
            const savedAnalyses = JSON.parse(localStorage.getItem('rockAnalyses') || '[]');
            savedAnalyses.unshift(analysisData);
            
            // Keep only last 50 analyses
            if (savedAnalyses.length > 50) {
                savedAnalyses.splice(50);
            }
            
            localStorage.setItem('rockAnalyses', JSON.stringify(savedAnalyses));
            alert('Analysis saved successfully!');
        }

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🪨 Rock Identifier loaded successfully!');
            
            // Check for camera support
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                console.warn('Camera not supported, only file upload available');
            }
        });
    </script>
</body>
</html>
