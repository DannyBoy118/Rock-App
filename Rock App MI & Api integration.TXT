// services/mlModel.js
import Tflite from 'tflite-react-native';
const tflite = new Tflite();
let modelLoaded = false;

/**
 * Load the TensorFlow Lite model from assets
 */
export async function loadModel() {
  if (modelLoaded) return;
  return new Promise((resolve, reject) => {
    tflite.loadModel({
      model: 'models/rock_classifier.tflite',
      labels: 'models/labels.txt',
      numThreads: 1,
    }, (err, res) => {
      if (err) {
        console.error('TFLite load error:', err);
        reject(err);
      } else {
        modelLoaded = true;
        resolve(res);
      }
    });
  });
}

/**
 * Run image through the TFLite model and return the top label
 * @param {string} imageUri - local file URI of the captured image
 * @returns {Promise<{label: string, confidence: number}>}
 */
export async function classifyImage(imageUri) {
  await loadModel();
  return new Promise((resolve, reject) => {
    tflite.runModelOnImage({
      path: imageUri,
      imageMean: 128,
      imageStd: 128,
      numResults: 3,
      threshold: 0.2,
    }, (err, res) => {
      if (err) {
        console.error('Classification error:', err);
        reject(err);
      } else {
        // res is an array of {label, confidence}
        resolve(res[0]);
      }
    });
  });
}

// services/api.js
import axios from 'axios';

const API_BASE_URL = 'https://api.yourrockdb.com/v1'; // replace with your backend URL

/**
 * Fetch detailed rock information from the backend by name
 * @param {string} rockName
 * @returns {Promise<Object>} rock data
 */
export async function fetchRockData(rockName) {
  try {
    const response = await axios.get(`${API_BASE_URL}/rocks`, {
      params: { name: rockName }
    });
    return response.data;
  } catch (err) {
    console.error('API fetch error:', err);
    throw err;
  }
}

// In App.js (update)
import React, { useState } from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import { RNCamera } from 'react-native-camera';
import { classifyImage } from './services/mlModel';
import { fetchRockData } from './services/api';

export default function App() {
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleCapture = async (camera) => {
    setLoading(true);
    try {
      const options = { quality: 0.8, base64: false };
      const data = await camera.takePictureAsync(options);
      // Classify image with on-device model
      const { label, confidence } = await classifyImage(data.uri);
      // Fetch extended rock info from API
      const rockInfo = await fetchRockData(label);
      // Consolidate result
      setAnalysis({
        name: label,
        confidence: (confidence * 100).toFixed(1) + '%',
        properties: rockInfo.properties,
        origin: rockInfo.origin,
        facts: rockInfo.facts,
      });
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <RNCamera style={styles.camera} type={RNCamera.Constants.Type.back} captureAudio={false}>
        {({ camera, status }) => status === 'READY' && (
          <View style={styles.captureContainer}>
            <TouchableOpacity onPress={() => handleCapture(camera)} style={styles.button}>
              <Text style={styles.buttonText}>{loading ? 'Analyzing...' : 'SNAP'}</Text>
            </TouchableOpacity>
          </View>
        )}
      </RNCamera>

      {analysis && (
        <View style={styles.analysisContainer}>
          <Text style={styles.analysisTitle}>{analysis.name}</Text>
          <Text>Confidence: {analysis.confidence}</Text>
          <Text>Properties: {analysis.properties.join(', ')}</Text>
          <Text>Origin: {analysis.origin}</Text>
          <Text>Facts: {analysis.facts}</Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  camera: { flex: 3 },
  captureContainer: { flex: 1, justifyContent: 'flex-end', alignItems: 'center' },
  button: { padding: 20, backgroundColor: '#008080', borderRadius: 10, marginBottom: 20 },
  buttonText: { color: '#fff', fontSize: 18 },
  analysisContainer: { flex: 2, padding: 20, backgroundColor: '#fff' },
  analysisTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 8 },
});

// Next steps:
// 1. Bundle TFLite model and labels in app assets
// 2. Deploy backend endpoints and secure with API key
// 3. Add error handling UI and fallbacks
// 4. Write unit/integration tests for services
