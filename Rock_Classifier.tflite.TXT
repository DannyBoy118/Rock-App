import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load your data
train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_data = train_datagen.flow_from_directory(
    'rock_images/', target_size=(224, 224), batch_size=32, subset='training'
)
val_data = train_datagen.flow_from_directory(
    'rock_images/', target_size=(224, 224), batch_size=32, subset='validation'
)

# Load pre-trained model
base_model = tf.keras.applications.MobileNetV2(input_shape=(224,224,3), include_top=False, weights='imagenet')
base_model.trainable = False

# Add custom layers
model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(train_data.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(train_data, validation_data=val_data, epochs=5)

# Save as TFLite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
with open('rock_classifier.tflite', 'wb') as f:
    f.write(tflite_model)